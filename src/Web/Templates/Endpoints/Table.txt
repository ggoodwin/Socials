using [APP].Application.Common.Models;
using [APP].Application.[ITEM]s.Commands.Create[ITEM];
using [APP].Application.[ITEM]s.Commands.Delete[ITEM];
using [APP].Application.[ITEM]s.Commands.Update[ITEM];
using [APP].Application.[ITEM]s.Queries;
using [APP].Application.[ITEM]s.Queries.GetAll[ITEM]sByUser;
using [APP].Application.[ITEM]s.Queries.GetAll[ITEM]sWithPagination;
using [APP].Application.[ITEM]s.Queries.Get[ITEM]ById;

namespace [APP].Web.Endpoints;

public class [ITEM]s : EndpointGroupBase
{
    public override void Map(WebApplication app)
    {
        app.MapGroup(this)
            .RequireAuthorization()
            .MapGet(GetAll[ITEM]sByUser, "{UserId}")
            .MapGet(GetAll[ITEM]sWithPagination)
            .MapGet(Get[ITEM]ById, "{id}")
            .MapPost(Create[ITEM])
            .MapPut(Update[ITEM], "{id}")
            .MapDelete(Delete[ITEM], "{id}");
    }

    public async Task<PaginatedList<[ITEM]BriefDto>> GetAll[ITEM]sWithPagination(ISender sender, [AsParameters] GetAll[ITEM]sWithPaginationQuery query)
    {
        return await sender.Send(query);
    }

    public async Task<List<[ITEM]BriefDto>> GetAll[ITEM]sByUser(ISender sender, string UserId, [AsParameters] GetAll[ITEM]sByUserQuery query)
    {
        return await sender.Send(query);
    }

    public async Task<[ITEM]BriefDto> Get[ITEM]ById(ISender sender, int id, [AsParameters] Get[ITEM]ByIdQuery query)
    {
        return await sender.Send(query);
    }

    public async Task<int> Create[ITEM](ISender sender, Create[ITEM]Command command)
    {
        return await sender.Send(command);
    }

    public async Task<IResult> Update[ITEM](ISender sender, int id, Update[ITEM]Command command)
    {
        if (id != command.Id) return Results.BadRequest();
        await sender.Send(command);
        return Results.NoContent();
    }

    public async Task<IResult> Delete[ITEM](ISender sender, int id)
    {
        await sender.Send(new Delete[ITEM]Command(id));
        return Results.NoContent();
    }
}
